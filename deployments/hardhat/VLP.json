{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "id",
      "outputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_settingsManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "name": "setInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settingsManager",
      "outputs": [
        {
          "internalType": "contract ISettingsManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa0d79f54d43ac52e9680b4f6d055bafe0728494a04cf30310fa242d35307f3cb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1155542",
    "logsBloom": "0x
    "blockHash": "0x450c957f9461f360da61a4a5f72a0920b4948b37fd028e1bf9f4c91a8067e7f2",
    "transactionHash": "0xa0d79f54d43ac52e9680b4f6d055bafe0728494a04cf30310fa242d35307f3cb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0xa0d79f54d43ac52e9680b4f6d055bafe0728494a04cf30310fa242d35307f3cb",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x450c957f9461f360da61a4a5f72a0920b4948b37fd028e1bf9f4c91a8067e7f2"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0xa0d79f54d43ac52e9680b4f6d055bafe0728494a04cf30310fa242d35307f3cb",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 1,
        "blockHash": "0x450c957f9461f360da61a4a5f72a0920b4948b37fd028e1bf9f4c91a8067e7f2"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "1155542",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "573dacd569188b5cf8be1c93d7b60f19",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"id\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_settingsManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"name\":\"setInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settingsManager\",\"outputs\":[{\"internalType\":\"contract ISettingsManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/VLP.sol\":\"VLP\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/core/interfaces/ISettingsManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface ISettingsManager {\\n    function decreaseOpenInterest(uint256 _tokenId, address _sender, bool _isLong, uint256 _amount) external;\\n\\n    function increaseOpenInterest(uint256 _tokenId, address _sender, bool _isLong, uint256 _amount) external;\\n\\n    function openInterestPerAssetPerSide(uint256 _tokenId, bool _isLong) external view returns (uint256);\\n\\n    function openInterestPerUser(address _sender) external view returns (uint256);\\n\\n    function bountyPercent() external view returns (uint32, uint32);\\n\\n    function checkBanList(address _delegate) external view returns (bool);\\n\\n    function checkDelegation(address _master, address _delegate) external view returns (bool);\\n\\n    function minCollateral() external view returns (uint256);\\n\\n    function closeDeltaTime() external view returns (uint256);\\n\\n    function expiryDuration() external view returns (uint256);\\n\\n    function selfExecuteCooldown() external view returns (uint256);\\n\\n    function cooldownDuration() external view returns (uint256);\\n\\n    function liquidationPendingTime() external view returns (uint256);\\n\\n    function depositFee(address token) external view returns (uint256);\\n\\n    function withdrawFee(address token) external view returns (uint256);\\n\\n    function feeManager() external view returns (address);\\n\\n    function feeRewardBasisPoints() external view returns (uint256);\\n\\n    function defaultBorrowFeeFactor() external view returns (uint256);\\n\\n    function borrowFeeFactor(uint256 tokenId) external view returns (uint256);\\n\\n    function totalOpenInterest() external view returns (uint256);\\n\\n    function basisFundingRateFactor() external view returns (uint256);\\n\\n    function deductFeePercent(address _account) external view returns (uint256);\\n\\n    function referrerTiers(address _referrer) external view returns (uint256);\\n\\n    function tierFees(uint256 _tier) external view returns (uint256);\\n\\n    function fundingIndex(uint256 _tokenId) external view returns (int256);\\n\\n    function fundingRateFactor(uint256 _tokenId) external view returns (uint256);\\n\\n    function slippageFactor(uint256 _tokenId) external view returns (uint256);\\n\\n    function getFundingFee(\\n        uint256 _tokenId,\\n        bool _isLong,\\n        uint256 _size,\\n        int256 _fundingIndex\\n    ) external view returns (int256);\\n\\n    function getBorrowRate(uint256 _tokenId, bool _isLong) external view returns (uint256);\\n\\n    function getFundingRate(uint256 _tokenId) external view returns (int256);\\n\\n    function getTradingFee(\\n        address _account,\\n        uint256 _tokenId,\\n        bool _isLong,\\n        uint256 _sizeDelta\\n    ) external view returns (uint256);\\n\\n    function getPnl(\\n        uint256 _tokenId,\\n        bool _isLong,\\n        uint256 _size,\\n        uint256 _averagePrice,\\n        uint256 _lastPrice,\\n        uint256 _lastIncreasedTime,\\n        uint256 _accruedBorrowFee,\\n        int256 _fundingIndex\\n    ) external view returns (int256, int256, int256);\\n\\n    function updateFunding(uint256 _tokenId) external;\\n\\n    function getBorrowFee(\\n        uint256 _borrowedSize,\\n        uint256 _lastIncreasedTime,\\n        uint256 _tokenId,\\n        bool _isLong\\n    ) external view returns (uint256);\\n\\n    function getUndiscountedTradingFee(\\n        uint256 _tokenId,\\n        bool _isLong,\\n        uint256 _sizeDelta\\n    ) external view returns (uint256);\\n\\n    function getReferFee(address _refer) external view returns (uint256);\\n\\n    function getReferFeeAndTraderRebate(address _refer) external view returns (uint256 referFee, uint256 traderRebate);\\n\\n    function platformFees(address _platform) external view returns (uint256);\\n\\n    function getPriceWithSlippage(\\n        uint256 _tokenId,\\n        bool _isLong,\\n        uint256 _size,\\n        uint256 _price\\n    ) external view returns (uint256);\\n\\n    function getSlippage(uint256 _slippageFactor, uint256 _size) external view returns (uint256);\\n\\n    function getDelegates(address _master) external view returns (address[] memory);\\n\\n    function isDeposit(address _token) external view returns (bool);\\n\\n    function isStakingEnabled(address _token) external view returns (bool);\\n\\n    function isUnstakingEnabled(address _token) external view returns (bool);\\n\\n    function isIncreasingPositionDisabled(uint256 _tokenId) external view returns (bool);\\n\\n    function isDecreasingPositionDisabled(uint256 _tokenId) external view returns (bool);\\n\\n    function isWhitelistedFromCooldown(address _addr) external view returns (bool);\\n\\n    function isWhitelistedFromTransferCooldown(address _addr) external view returns (bool);\\n\\n    function isWithdraw(address _token) external view returns (bool);\\n\\n    function lastFundingTimes(uint256 _tokenId) external view returns (uint256);\\n\\n    function liquidateThreshold(uint256) external view returns (uint256);\\n\\n    function tradingFee(uint256 _tokenId, bool _isLong) external view returns (uint256);\\n\\n    function defaultMaxOpenInterestPerUser() external view returns (uint256);\\n\\n    function maxProfitPercent(uint256 _tokenId) external view returns (uint256);\\n\\n    function defaultMaxProfitPercent() external view returns (uint256);\\n\\n    function maxOpenInterestPerAssetPerSide(uint256 _tokenId, bool _isLong) external view returns (uint256);\\n\\n    function priceMovementPercent() external view returns (uint256);\\n\\n    function maxOpenInterestPerUser(address _account) external view returns (uint256);\\n\\n    function stakingFee(address token) external view returns (uint256);\\n\\n    function unstakingFee(address token) external view returns (uint256);\\n\\n    function triggerGasFee() external view returns (uint256);\\n\\n    function marketOrderGasFee() external view returns (uint256);\\n\\n    function maxTriggerPerPosition() external view returns (uint256);\\n\\n    function maxFundingRate() external view returns (uint256);\\n\\n    function maxTotalVlp() external view returns (uint256);\\n\\n    function minProfitDurations(uint256 tokenId) external view returns (uint256);\\n\\n    function maxCloseProfits(uint256 tokenId) external view returns (uint256);\\n\\n    function maxCloseProfitPercents(uint256 tokenId) external view returns (uint256);\\n\\n    function setMaxOpenInterestPerAsset(uint256 _tokenId, uint256 _maxAmount) external;\\n\\n    function lastFundingRates(uint256 tokenId) external view returns (int256);\\n\\n    function tempMaxFundingRateFactors(uint256 tokenId) external view returns (uint256);\\n\\n    function volatilityFactors(uint256 tokenId) external view returns (uint256);\\n\\n    function longBiasFactors(uint256 tokenId) external view returns (uint256);\\n\\n    function fundingRateVelocityFactors(uint256 tokenId) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x95816b6e38314ae5787c281922646290a3e8be5503c69dc9690f87e113eac183\",\"license\":\"MIT\"},\"contracts/core/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IVault {\\n    function accountDeltaIntoTotalUSD(bool _isIncrease, uint256 _delta) external;\\n\\n    function distributeFee(uint256 _fee, address _refer, address _trader) external;\\n\\n    function takeVUSDIn(address _account, uint256 _amount) external;\\n\\n    function takeVUSDOut(address _account, uint256 _amount) external;\\n\\n    function lastStakedAt(address _account) external view returns (uint256);\\n\\n    function getVaultUSDBalance() external view returns (uint256);\\n\\n    function getVLPPrice() external view returns (uint256);\\n}\",\"keccak256\":\"0xc9211f5237f420221353f0b11501826fc59dc773bcca210e9d8915cd8856e7b4\",\"license\":\"MIT\"},\"contracts/tokens/BaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract BaseToken is IERC20, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    string public name;\\n    string public symbol;\\n    uint8 public constant decimals = 18;\\n    uint256 public override totalSupply;\\n\\n    mapping(address => uint256) public balances;\\n    mapping(address => mapping(address => uint256)) public allowances;\\n\\n    constructor(string memory _name, string memory _symbol, uint256 _initialSupply) {\\n        name = _name;\\n        symbol = _symbol;\\n        _mint(msg.sender, _initialSupply);\\n    }\\n\\n    function approve(address _spender, uint256 _amount) external override returns (bool) {\\n        _approve(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    function setInfo(string memory _name, string memory _symbol) external onlyOwner {\\n        name = _name;\\n        symbol = _symbol;\\n    }\\n\\n    function transfer(address _recipient, uint256 _amount) public virtual override returns (bool) {\\n        _transfer(msg.sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public virtual override returns (bool) {\\n        require(allowances[_sender][msg.sender] >= _amount, \\\"BaseToken: transfer amount exceeds allowance\\\");\\n        uint256 nextAllowance = allowances[_sender][msg.sender] - _amount;\\n        _approve(_sender, msg.sender, nextAllowance);\\n        _transfer(_sender, _recipient, _amount);\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address _spender) external view override returns (uint256) {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    function balanceOf(address _account) external view override returns (uint256) {\\n        return balances[_account];\\n    }\\n\\n    function _approve(address _owner, address _spender, uint256 _amount) private {\\n        require(_spender != address(0), \\\"BaseToken: approve to the zero address\\\");\\n\\n        allowances[_owner][_spender] = _amount;\\n\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n\\n    function _burn(address _account, uint256 _amount) internal {\\n        require(_account != address(0), \\\"BaseToken: burn from the zero address\\\");\\n\\n        require(balances[_account] >= _amount, \\\"BaseToken: burn amount exceeds balance\\\");\\n        balances[_account] -= _amount;\\n        totalSupply -= _amount;\\n\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    function _mint(address _account, uint256 _amount) internal {\\n        require(_account != address(0), \\\"BaseToken: mint to the zero address\\\");\\n\\n        totalSupply += _amount;\\n        balances[_account] += _amount;\\n\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    function _transfer(address _sender, address _recipient, uint256 _amount) private {\\n        require(_recipient != address(0), \\\"BaseToken: transfer to the zero address\\\");\\n\\n        require(balances[_sender] >= _amount, \\\"BaseToken: transfer amount exceeds balance\\\");\\n        balances[_sender] -= _amount;\\n        balances[_recipient] += _amount;\\n\\n        emit Transfer(_sender, _recipient, _amount);\\n    }\\n}\",\"keccak256\":\"0x81b5ce2a3bc3dce40d21bb2db7e0dfacc9abd5b4191d30f867ccb8df02105a3c\",\"license\":\"MIT\"},\"contracts/tokens/MintableBaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./BaseToken.sol\\\";\\nimport \\\"./interfaces/IMintable.sol\\\";\\n\\ncontract MintableBaseToken is BaseToken, IMintable {\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256 _initialSupply\\n    ) BaseToken(_name, _symbol, _initialSupply) {}\\n\\n    function burn(address _account, uint256 _amount) external override onlyOwner {\\n        _burn(_account, _amount);\\n    }\\n\\n    function mint(address _account, uint256 _amount) external override onlyOwner {\\n        _mint(_account, _amount);\\n    }\\n}\",\"keccak256\":\"0x2c60a6a16d1ac6f415ae9dba4783d4d4ab31fa9d1f7a4c8090d57fbc4572e470\",\"license\":\"MIT\"},\"contracts/tokens/VLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./MintableBaseToken.sol\\\";\\nimport \\\"../core/interfaces/IVault.sol\\\";\\nimport \\\"../core/interfaces/ISettingsManager.sol\\\";\\n\\ncontract VLP is MintableBaseToken {\\n    IVault public vault;\\n    ISettingsManager public settingsManager;\\n\\n    constructor() MintableBaseToken(\\\"Vela LP\\\", \\\"VLP\\\", 0) {}\\n\\n    function initialize(address _vault, address _settingsManager) external onlyOwner {\\n        vault = IVault(_vault);\\n        settingsManager = ISettingsManager(_settingsManager);\\n    }\\n\\n    function id() external pure returns (string memory _name) {\\n        return \\\"VLP\\\";\\n    }\\n\\n    function transfer(address _recipient, uint256 _amount) public override returns (bool) {\\n        require(\\n            vault.lastStakedAt(msg.sender) + settingsManager.cooldownDuration() <= block.timestamp,\\n            \\\"cooldown duration not yet passed\\\"\\n        );\\n        return super.transfer(_recipient, _amount);\\n    }\\n\\n    function transferFrom(address _sender, address _recipient, uint256 _amount) public override returns (bool) {\\n        if (!settingsManager.isWhitelistedFromTransferCooldown(_recipient)) {\\n            require(\\n                vault.lastStakedAt(_sender) + settingsManager.cooldownDuration() <= block.timestamp,\\n                \\\"cooldown duration not yet passed\\\"\\n            );\\n        }\\n\\n        return super.transferFrom(_sender, _recipient, _amount);\\n    }\\n}\",\"keccak256\":\"0xd875aefe3e57b74f841a6f132d559c7b3c0565ec12b9d9f00151840bac6f1d07\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IMintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\ninterface IMintable {\\n    function burn(address _account, uint256 _amount) external;\\n\\n    function mint(address _account, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0x4a133c8f92ac01f51fa3a2132a262bca27f6ff1b93e7ddcf0e35539a66088d26\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405180604001604052806007815260200166056656c61204c560cc1b815250604051806040016040528060038152602001620564c560ec1b81525060008282826200006d62000067620000b160201b60201c565b620000b5565b825162000082906001906020860190620001f9565b50815162000098906002906020850190620001f9565b50620000a5338262000105565b50505050505062000303565b3390565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0382166200016c5760405162461bcd60e51b815260206004820152602360248201527f42617365546f6b656e3a206d696e7420746f20746865207a65726f206164647260448201526265737360e81b606482015260840160405180910390fd5b80600360008282546200018091906200029f565b90915550506001600160a01b03821660009081526004602052604081208054839290620001af9084906200029f565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b8280546200020790620002c6565b90600052602060002090601f0160209004810192826200022b576000855562000276565b82601f106200024657805160ff191683800117855562000276565b8280016001018555821562000276579182015b828111156200027657825182559160200191906001019062000259565b506200028492915062000288565b5090565b5b8082111562000284576000815560010162000289565b60008219821115620002c157634e487b7160e01b600052601160045260246000fd5b500190565b600181811c90821680620002db57607f821691505b60208210811415620002fd57634e487b7160e01b600052602260045260246000fd5b50919050565b61125b80620003136000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c8063715018a6116100b8578063a923fc401161007c578063a923fc40146102b8578063af640d0f146102cb578063bb7dd5e6146102ea578063dd62ed3e146102fd578063f2fde38b14610336578063fbfa77cf1461034957600080fd5b8063715018a61461025d5780638da5cb5b1461026557806395d89b411461028a5780639dc29fac14610292578063a9059cbb146102a557600080fd5b8063313ce567116100ff578063313ce567146101c757806340c10f19146101e1578063485cc955146101f657806355b6ed5c1461020957806370a082311461023457600080fd5b806306fdde031461013c578063095ea7b31461015a57806318160ddd1461017d57806323b872dd1461019457806327e235e3146101a7575b600080fd5b61014461035c565b6040516101519190610f3e565b60405180910390f35b61016d610168366004610faf565b6103ea565b6040519015158152602001610151565b61018660035481565b604051908152602001610151565b61016d6101a2366004610fd9565b610400565b6101866101b5366004611015565b60046020526000908152604090205481565b6101cf601281565b60405160ff9091168152602001610151565b6101f46101ef366004610faf565b6105eb565b005b6101f4610204366004611030565b610601565b610186610217366004611030565b600560209081526000928352604080842090915290825290205481565b610186610242366004611015565b6001600160a01b031660009081526004602052604090205490565b6101f4610637565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610151565b61014461064b565b6101f46102a0366004610faf565b610658565b61016d6102b3366004610faf565b61066a565b6101f46102c6366004611106565b6107d7565b6040805180820190915260038152620564c560ec1b6020820152610144565b600754610272906001600160a01b031681565b61018661030b366004611030565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b6101f4610344366004611015565b61080b565b600654610272906001600160a01b031681565b600180546103699061116a565b80601f01602080910402602001604051908101604052809291908181526020018280546103959061116a565b80156103e25780601f106103b7576101008083540402835291602001916103e2565b820191906000526020600020905b8154815290600101906020018083116103c557829003601f168201915b505050505081565b60006103f7338484610884565b50600192915050565b6007546040516372777ee160e11b81526001600160a01b038481166004830152600092169063e4eefdc29060240160206040518083038186803b15801561044657600080fd5b505afa15801561045a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047e91906111a5565b6105d85760075460408051633526931560e01b8152905142926001600160a01b0316916335269315916004808301926020929190829003018186803b1580156104c657600080fd5b505afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe91906111c7565b6006546040516377a46edd60e01b81526001600160a01b038881166004830152909116906377a46edd9060240160206040518083038186803b15801561054357600080fd5b505afa158015610557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b91906111c7565b61058591906111f6565b11156105d85760405162461bcd60e51b815260206004820181905260248201527f636f6f6c646f776e206475726174696f6e206e6f74207965742070617373656460448201526064015b60405180910390fd5b6105e384848461094b565b949350505050565b6105f3610a25565b6105fd8282610a7f565b5050565b610609610a25565b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b61063f610a25565b6106496000610b6b565b565b600280546103699061116a565b610660610a25565b6105fd8282610bbb565b600042600760009054906101000a90046001600160a01b03166001600160a01b031663352693156040518163ffffffff1660e01b815260040160206040518083038186803b1580156106bb57600080fd5b505afa1580156106cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f391906111c7565b6006546040516377a46edd60e01b81523360048201526001600160a01b03909116906377a46edd9060240160206040518083038186803b15801561073657600080fd5b505afa15801561074a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076e91906111c7565b61077891906111f6565b11156107c65760405162461bcd60e51b815260206004820181905260248201527f636f6f6c646f776e206475726174696f6e206e6f74207965742070617373656460448201526064016105cf565b6107d08383610d1a565b9392505050565b6107df610a25565b81516107f2906001906020850190610ea5565b508051610806906002906020840190610ea5565b505050565b610813610a25565b6001600160a01b0381166108785760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105cf565b61088181610b6b565b50565b6001600160a01b0382166108e95760405162461bcd60e51b815260206004820152602660248201527f42617365546f6b656e3a20617070726f766520746f20746865207a65726f206160448201526564647265737360d01b60648201526084016105cf565b6001600160a01b0383811660008181526005602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03831660009081526005602090815260408083203384529091528120548211156109d35760405162461bcd60e51b815260206004820152602c60248201527f42617365546f6b656e3a207472616e7366657220616d6f756e7420657863656560448201526b647320616c6c6f77616e636560a01b60648201526084016105cf565b6001600160a01b0384166000908152600560209081526040808320338452909152812054610a0290849061120e565b9050610a0f853383610884565b610a1a858585610d23565b506001949350505050565b6000546001600160a01b031633146106495760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105cf565b6001600160a01b038216610ae15760405162461bcd60e51b815260206004820152602360248201527f42617365546f6b656e3a206d696e7420746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105cf565b8060036000828254610af391906111f6565b90915550506001600160a01b03821660009081526004602052604081208054839290610b209084906111f6565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038216610c1f5760405162461bcd60e51b815260206004820152602560248201527f42617365546f6b656e3a206275726e2066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105cf565b6001600160a01b038216600090815260046020526040902054811115610c965760405162461bcd60e51b815260206004820152602660248201527f42617365546f6b656e3a206275726e20616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016105cf565b6001600160a01b03821660009081526004602052604081208054839290610cbe90849061120e565b925050819055508060036000828254610cd7919061120e565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610b5f565b60006103f73384845b6001600160a01b038216610d895760405162461bcd60e51b815260206004820152602760248201527f42617365546f6b656e3a207472616e7366657220746f20746865207a65726f206044820152666164647265737360c81b60648201526084016105cf565b6001600160a01b038316600090815260046020526040902054811115610e045760405162461bcd60e51b815260206004820152602a60248201527f42617365546f6b656e3a207472616e7366657220616d6f756e7420657863656560448201526964732062616c616e636560b01b60648201526084016105cf565b6001600160a01b03831660009081526004602052604081208054839290610e2c90849061120e565b90915550506001600160a01b03821660009081526004602052604081208054839290610e599084906111f6565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161093e91815260200190565b828054610eb19061116a565b90600052602060002090601f016020900481019282610ed35760008555610f19565b82601f10610eec57805160ff1916838001178555610f19565b82800160010185558215610f19579182015b82811115610f19578251825591602001919060010190610efe565b50610f25929150610f29565b5090565b5b80821115610f255760008155600101610f2a565b600060208083528351808285015260005b81811015610f6b57858101830151858201604001528201610f4f565b81811115610f7d576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610faa57600080fd5b919050565b60008060408385031215610fc257600080fd5b610fcb83610f93565b946020939093013593505050565b600080600060608486031215610fee57600080fd5b610ff784610f93565b925061100560208501610f93565b9150604084013590509250925092565b60006020828403121561102757600080fd5b6107d082610f93565b6000806040838503121561104357600080fd5b61104c83610f93565b915061105a60208401610f93565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261108a57600080fd5b813567ffffffffffffffff808211156110a5576110a5611063565b604051601f8301601f19908116603f011681019082821181831017156110cd576110cd611063565b816040528381528660208588010111156110e657600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561111957600080fd5b823567ffffffffffffffff8082111561113157600080fd5b61113d86838701611079565b9350602085013591508082111561115357600080fd5b5061116085828601611079565b9150509250929050565b600181811c9082168061117e57607f821691505b6020821081141561119f57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156111b757600080fd5b815180151581146107d057600080fd5b6000602082840312156111d957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611209576112096111e0565b500190565b600082821015611220576112206111e0565b50039056fea26469706673582212201b8728580b5e5f66240c0bdabbd225a953cc11bf643f5be05959cf210c1e7c9a64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c8063715018a6116100b8578063a923fc401161007c578063a923fc40146102b8578063af640d0f146102cb578063bb7dd5e6146102ea578063dd62ed3e146102fd578063f2fde38b14610336578063fbfa77cf1461034957600080fd5b8063715018a61461025d5780638da5cb5b1461026557806395d89b411461028a5780639dc29fac14610292578063a9059cbb146102a557600080fd5b8063313ce567116100ff578063313ce567146101c757806340c10f19146101e1578063485cc955146101f657806355b6ed5c1461020957806370a082311461023457600080fd5b806306fdde031461013c578063095ea7b31461015a57806318160ddd1461017d57806323b872dd1461019457806327e235e3146101a7575b600080fd5b61014461035c565b6040516101519190610f3e565b60405180910390f35b61016d610168366004610faf565b6103ea565b6040519015158152602001610151565b61018660035481565b604051908152602001610151565b61016d6101a2366004610fd9565b610400565b6101866101b5366004611015565b60046020526000908152604090205481565b6101cf601281565b60405160ff9091168152602001610151565b6101f46101ef366004610faf565b6105eb565b005b6101f4610204366004611030565b610601565b610186610217366004611030565b600560209081526000928352604080842090915290825290205481565b610186610242366004611015565b6001600160a01b031660009081526004602052604090205490565b6101f4610637565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610151565b61014461064b565b6101f46102a0366004610faf565b610658565b61016d6102b3366004610faf565b61066a565b6101f46102c6366004611106565b6107d7565b6040805180820190915260038152620564c560ec1b6020820152610144565b600754610272906001600160a01b031681565b61018661030b366004611030565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b6101f4610344366004611015565b61080b565b600654610272906001600160a01b031681565b600180546103699061116a565b80601f01602080910402602001604051908101604052809291908181526020018280546103959061116a565b80156103e25780601f106103b7576101008083540402835291602001916103e2565b820191906000526020600020905b8154815290600101906020018083116103c557829003601f168201915b505050505081565b60006103f7338484610884565b50600192915050565b6007546040516372777ee160e11b81526001600160a01b038481166004830152600092169063e4eefdc29060240160206040518083038186803b15801561044657600080fd5b505afa15801561045a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047e91906111a5565b6105d85760075460408051633526931560e01b8152905142926001600160a01b0316916335269315916004808301926020929190829003018186803b1580156104c657600080fd5b505afa1580156104da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fe91906111c7565b6006546040516377a46edd60e01b81526001600160a01b038881166004830152909116906377a46edd9060240160206040518083038186803b15801561054357600080fd5b505afa158015610557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b91906111c7565b61058591906111f6565b11156105d85760405162461bcd60e51b815260206004820181905260248201527f636f6f6c646f776e206475726174696f6e206e6f74207965742070617373656460448201526064015b60405180910390fd5b6105e384848461094b565b949350505050565b6105f3610a25565b6105fd8282610a7f565b5050565b610609610a25565b600680546001600160a01b039384166001600160a01b03199182161790915560078054929093169116179055565b61063f610a25565b6106496000610b6b565b565b600280546103699061116a565b610660610a25565b6105fd8282610bbb565b600042600760009054906101000a90046001600160a01b03166001600160a01b031663352693156040518163ffffffff1660e01b815260040160206040518083038186803b1580156106bb57600080fd5b505afa1580156106cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f391906111c7565b6006546040516377a46edd60e01b81523360048201526001600160a01b03909116906377a46edd9060240160206040518083038186803b15801561073657600080fd5b505afa15801561074a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076e91906111c7565b61077891906111f6565b11156107c65760405162461bcd60e51b815260206004820181905260248201527f636f6f6c646f776e206475726174696f6e206e6f74207965742070617373656460448201526064016105cf565b6107d08383610d1a565b9392505050565b6107df610a25565b81516107f2906001906020850190610ea5565b508051610806906002906020840190610ea5565b505050565b610813610a25565b6001600160a01b0381166108785760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105cf565b61088181610b6b565b50565b6001600160a01b0382166108e95760405162461bcd60e51b815260206004820152602660248201527f42617365546f6b656e3a20617070726f766520746f20746865207a65726f206160448201526564647265737360d01b60648201526084016105cf565b6001600160a01b0383811660008181526005602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03831660009081526005602090815260408083203384529091528120548211156109d35760405162461bcd60e51b815260206004820152602c60248201527f42617365546f6b656e3a207472616e7366657220616d6f756e7420657863656560448201526b647320616c6c6f77616e636560a01b60648201526084016105cf565b6001600160a01b0384166000908152600560209081526040808320338452909152812054610a0290849061120e565b9050610a0f853383610884565b610a1a858585610d23565b506001949350505050565b6000546001600160a01b031633146106495760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105cf565b6001600160a01b038216610ae15760405162461bcd60e51b815260206004820152602360248201527f42617365546f6b656e3a206d696e7420746f20746865207a65726f206164647260448201526265737360e81b60648201526084016105cf565b8060036000828254610af391906111f6565b90915550506001600160a01b03821660009081526004602052604081208054839290610b209084906111f6565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038216610c1f5760405162461bcd60e51b815260206004820152602560248201527f42617365546f6b656e3a206275726e2066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016105cf565b6001600160a01b038216600090815260046020526040902054811115610c965760405162461bcd60e51b815260206004820152602660248201527f42617365546f6b656e3a206275726e20616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016105cf565b6001600160a01b03821660009081526004602052604081208054839290610cbe90849061120e565b925050819055508060036000828254610cd7919061120e565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610b5f565b60006103f73384845b6001600160a01b038216610d895760405162461bcd60e51b815260206004820152602760248201527f42617365546f6b656e3a207472616e7366657220746f20746865207a65726f206044820152666164647265737360c81b60648201526084016105cf565b6001600160a01b038316600090815260046020526040902054811115610e045760405162461bcd60e51b815260206004820152602a60248201527f42617365546f6b656e3a207472616e7366657220616d6f756e7420657863656560448201526964732062616c616e636560b01b60648201526084016105cf565b6001600160a01b03831660009081526004602052604081208054839290610e2c90849061120e565b90915550506001600160a01b03821660009081526004602052604081208054839290610e599084906111f6565b92505081905550816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161093e91815260200190565b828054610eb19061116a565b90600052602060002090601f016020900481019282610ed35760008555610f19565b82601f10610eec57805160ff1916838001178555610f19565b82800160010185558215610f19579182015b82811115610f19578251825591602001919060010190610efe565b50610f25929150610f29565b5090565b5b80821115610f255760008155600101610f2a565b600060208083528351808285015260005b81811015610f6b57858101830151858201604001528201610f4f565b81811115610f7d576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610faa57600080fd5b919050565b60008060408385031215610fc257600080fd5b610fcb83610f93565b946020939093013593505050565b600080600060608486031215610fee57600080fd5b610ff784610f93565b925061100560208501610f93565b9150604084013590509250925092565b60006020828403121561102757600080fd5b6107d082610f93565b6000806040838503121561104357600080fd5b61104c83610f93565b915061105a60208401610f93565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261108a57600080fd5b813567ffffffffffffffff808211156110a5576110a5611063565b604051601f8301601f19908116603f011681019082821181831017156110cd576110cd611063565b816040528381528660208588010111156110e657600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561111957600080fd5b823567ffffffffffffffff8082111561113157600080fd5b61113d86838701611079565b9350602085013591508082111561115357600080fd5b5061116085828601611079565b9150509250929050565b600181811c9082168061117e57607f821691505b6020821081141561119f57634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156111b757600080fd5b815180151581146107d057600080fd5b6000602082840312156111d957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115611209576112096111e0565b500190565b600082821015611220576112206111e0565b50039056fea26469706673582212201b8728580b5e5f66240c0bdabbd225a953cc11bf643f5be05959cf210c1e7c9a64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2083,
        "contract": "contracts/tokens/VLP.sol:VLP",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 27996,
        "contract": "contracts/tokens/VLP.sol:VLP",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 27998,
        "contract": "contracts/tokens/VLP.sol:VLP",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 28004,
        "contract": "contracts/tokens/VLP.sol:VLP",
        "label": "totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 28008,
        "contract": "contracts/tokens/VLP.sol:VLP",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 28014,
        "contract": "contracts/tokens/VLP.sol:VLP",
        "label": "allowances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 28728,
        "contract": "contracts/tokens/VLP.sol:VLP",
        "label": "vault",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IVault)22914"
      },
      {
        "astId": 28731,
        "contract": "contracts/tokens/VLP.sol:VLP",
        "label": "settingsManager",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ISettingsManager)22864"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ISettingsManager)22864": {
        "encoding": "inplace",
        "label": "contract ISettingsManager",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)22914": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}